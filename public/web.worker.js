importScripts("./WarlockSim.js");

onmessage = (event) => {
  fetch('./WarlockSim.wasm')
  .then(response => response.arrayBuffer())
  .then(binary => WarlockSim({ wasmBinary: binary }))
  .then(w => w.ready)
  .then(module => {
    try {
      const player = event.data.playerSettings;
      const simulation = event.data.simulationSettings;

      const itemsPtr = module.allocItems();
      itemsPtr.head = parseInt(player.items.head) || 0;
      itemsPtr.neck = parseInt(player.items.neck) || 0;
      itemsPtr.shoulders = parseInt(player.items.shoulders) || 0;
      itemsPtr.back = parseInt(player.items.back) || 0;
      itemsPtr.chest = parseInt(player.items.chest) || 0;
      itemsPtr.bracer = parseInt(player.items.bracer) || 0;
      itemsPtr.gloves = parseInt(player.items.gloves) || 0;
      itemsPtr.belt = parseInt(player.items.belt) || 0;
      itemsPtr.legs = parseInt(player.items.legs) || 0;
      itemsPtr.boots = parseInt(player.items.boots) || 0;
      itemsPtr.ring1 = parseInt(player.items.ring1) || 0;
      itemsPtr.ring2 = parseInt(player.items.ring2) || 0;
      itemsPtr.trinket1 = parseInt(player.items.trinket1) || 0;
      itemsPtr.trinket2 = parseInt(player.items.trinket2) || 0;
      itemsPtr.mainhand = parseInt(player.items.mainhand) || 0;
      itemsPtr.offhand = parseInt(player.items.offhand) || 0;
      itemsPtr.twohand = parseInt(player.items.twohand) || 0;
      itemsPtr.wand = parseInt(player.items.wand) || 0;

      const aurasPtr = module.allocAuras();
      aurasPtr.felArmor = player.auras.felArmor || false;
      aurasPtr.blessingOfKings = player.auras.blessingOfKings || false;
      aurasPtr.blessingOfWisdom = player.auras.blessingOfWisdom || false;
      aurasPtr.judgementOfWisdom = player.auras.judgementOfWisdom || false;
      aurasPtr.manaSpringTotem = player.auras.manaSpringTotem || false;
      aurasPtr.wrathOfAirTotem = player.auras.wrathOfAirTotem || false;
      aurasPtr.totemOfWrath = player.auras.totemOfWrath || false;
      aurasPtr.markOfTheWild = player.auras.markOfTheWild || false;
      aurasPtr.arcaneIntellect = player.auras.arcaneIntellect || false;
      aurasPtr.prayerOfFortitude = player.auras.prayerOfFortitude || false;
      aurasPtr.prayerOfSpirit = player.auras.prayerOfSpirit || false;
      aurasPtr.bloodPact = player.auras.bloodPact || false;
      aurasPtr.inspiringPresence = player.auras.inspiringPresence || false;
      aurasPtr.moonkinAura = player.auras.moonkinAura || false;
      aurasPtr.powerInfusion = player.auras.powerInfusion || false;
      aurasPtr.powerOfTheGuardianWarlock = player.auras.powerOfTheGuardianWarlock || false;
      aurasPtr.powerOfTheGuardianMage = player.auras.powerOfTheGuardianMage || false;
      aurasPtr.eyeOfTheNight = player.auras.eyeOfTheNight || false;
      aurasPtr.chainOfTheTwilightOwl = player.auras.chainOfTheTwilightOwl || false;
      aurasPtr.jadePendantOfBlasting = player.auras.jadePendantOfBlasting || false;
      aurasPtr.idolOfTheRavenGoddess = player.auras.idolOfTheRavenGoddess || false;
      aurasPtr.drumsOfBattle = player.auras.drumsOfBattle || false;
      aurasPtr.drumsOfWar = player.auras.drumsOfWar || false;
      aurasPtr.drumsOfRestoration = player.auras.drumsOfRestoration || false;
      aurasPtr.bloodlust = player.auras.bloodlust || false;
      aurasPtr.ferociousInspiration = player.auras.ferociousInspiration || false;
      aurasPtr.innervate = player.auras.innervate || false;
      aurasPtr.manaTideTotem = player.auras.manaTideTotem || false;
      aurasPtr.chippedPowerCore = player.auras.chippedPowerCore || false;
      aurasPtr.crackedPowerCore = player.auras.crackedPowerCore || false;
      aurasPtr.curseOfTheElements = player.auras.curseOfTheElements || false;
      aurasPtr.shadowWeaving = player.auras.shadowWeaving || false;
      aurasPtr.improvedScorch = player.auras.improvedScorch || false;
      aurasPtr.misery = player.auras.misery || false;
      aurasPtr.judgementOfTheCrusader = player.auras.judgementOfTheCrusader || false;
      aurasPtr.vampiricTouch = player.auras.vampiricTouch || false;
      aurasPtr.faerieFire = player.auras.faerieFire || false;
      aurasPtr.sunderArmor = player.auras.sunderArmor || false;
      aurasPtr.exposeArmor = player.auras.exposeArmor || false;
      aurasPtr.curseOfRecklessness = player.auras.curseOfRecklessness || false;
      aurasPtr.bloodFrenzy = player.auras.bloodFrenzy || false;
      aurasPtr.exposeWeakness = player.auras.exposeWeakness || false;
      aurasPtr.annihilator = player.auras.annihilator || false;
      aurasPtr.improvedHuntersMark = player.auras.improvedHuntersMark || false;
      aurasPtr.flaskOfPureDeath = player.auras.flaskOfPureDeath || false;
      aurasPtr.elixirOfMajorShadowPower = player.auras.elixirOfMajorShadowPower || false;
      aurasPtr.elixirOfMajorFirepower = player.auras.elixirOfMajorFirepower || false;
      aurasPtr.greaterArcaneElixir = player.auras.greaterArcaneElixir || false;
      aurasPtr.adeptsElixir = player.auras.adeptsElixir || false;
      aurasPtr.elixirOfDraenicWisdom = player.auras.elixirOfDraenicWisdom || false;
      aurasPtr.elixirOfMajorMageblood = player.auras.elixirOfMajorMageblood || false;
      aurasPtr.superManaPotion = player.auras.superManaPotion || false;
      aurasPtr.destructionPotion = player.auras.destructionPotion || false;
      aurasPtr.brilliantWizardOil = player.auras.brilliantWizardOil || false;
      aurasPtr.superiorWizardOil = player.auras.superiorWizardOil || false;
      aurasPtr.blessedWizardOil = player.auras.blessedWizardOil || false;
      aurasPtr.demonicRune = player.auras.demonicRune || false;
      aurasPtr.flameCap = player.auras.flameCap || false;
      aurasPtr.rumseyRumBlackLabel = player.auras.rumseyRumBlackLabel || false;
      aurasPtr.kreegsStoutBeatdown = player.auras.kreegsStoutBeatdown || false;
      aurasPtr.blackenedBasilisk = player.auras.blackenedBasilisk || false;
      aurasPtr.skullfishSoup = player.auras.skullfishSoup || false;
      aurasPtr.veryBerryCream = player.auras.veryBerryCream || false;
      aurasPtr.midsummerSausage = player.auras.midsummerSausage || false;
      aurasPtr.bloodthistle = player.auras.bloodthistle || false;
      aurasPtr.blessingOfKingsPet = player.auras.blessingOfKingsPet || false;
      aurasPtr.blessingOfWisdomPet = player.auras.blessingOfWisdomPet || false;
      aurasPtr.blessingOfMight = player.auras.blessingOfMight || false;
      aurasPtr.arcaneIntellectPet = player.auras.arcaneIntellectPet || false;
      aurasPtr.markOfTheWildPet = player.auras.markOfTheWildPet || false;
      aurasPtr.prayerOfFortitudePet = player.auras.prayerOfFortitudePet || false;
      aurasPtr.prayerOfSpiritPet = player.auras.prayerOfSpiritPet || false;
      aurasPtr.kiblersBits = player.auras.kiblersBits || false;
      aurasPtr.heroicPresence = player.auras.heroicPresence || false;
      aurasPtr.strengthOfEarthTotem = player.auras.strengthOfEarthTotem || false;
      aurasPtr.graceOfAirTotem = player.auras.graceOfAirTotem || false;
      aurasPtr.battleShout = player.auras.battleShout || false;
      aurasPtr.trueshotAura = player.auras.trueshotAura || false;
      aurasPtr.leaderOfThePack = player.auras.leaderOfThePack || false;
      aurasPtr.unleashedRage = player.auras.unleashedRage || false;
      aurasPtr.scrollOfStaminaV = player.auras.scrollOfStaminaV || false;
      aurasPtr.scrollOfIntellectV = player.auras.scrollOfIntellectV || false;
      aurasPtr.scrollOfStrengthV = player.auras.scrollOfStrengthV || false;
      aurasPtr.scrollOfAgilityV = player.auras.scrollOfAgilityV || false;
      aurasPtr.scrollOfSpiritV = player.auras.scrollOfSpiritV || false;

      const talentsPtr = module.allocTalents();
      talentsPtr.suppression = parseInt(player.talents.suppression) || 0;
      talentsPtr.improvedCorruption = parseInt(player.talents.improvedCorruption) || 0;
      talentsPtr.improvedLifeTap = parseInt(player.talents.improvedLifeTap) || 0;
      talentsPtr.improvedCurseOfAgony = parseInt(player.talents.improvedCurseOfAgony) || 0;
      talentsPtr.amplifyCurse = parseInt(player.talents.amplifyCurse) || 0;
      talentsPtr.nightfall = parseInt(player.talents.nightfall) || 0;
      talentsPtr.empoweredCorruption = parseInt(player.talents.empoweredCorruption) || 0;
      talentsPtr.siphonLife = parseInt(player.talents.siphonLife) || 0;
      talentsPtr.shadowMastery = parseInt(player.talents.shadowMastery) || 0;
      talentsPtr.contagion = parseInt(player.talents.contagion) || 0;
      talentsPtr.darkPact = parseInt(player.talents.darkPact) || 0;
      talentsPtr.unstableAffliction = parseInt(player.talents.unstableAffliction) || 0;
      talentsPtr.improvedImp = parseInt(player.talents.improvedImp) || 0;
      talentsPtr.demonicEmbrace = parseInt(player.talents.demonicEmbrace) || 0;
      talentsPtr.felIntellect = parseInt(player.talents.felIntellect) || 0;
      talentsPtr.felStamina = parseInt(player.talents.felStamina) || 0;
      talentsPtr.improvedSuccubus = parseInt(player.talents.improvedSuccubus) || 0;
      talentsPtr.demonicAegis = parseInt(player.talents.demonicAegis) || 0;
      talentsPtr.unholyPower = parseInt(player.talents.unholyPower) || 0;
      talentsPtr.demonicSacrifice = parseInt(player.talents.demonicSacrifice) || 0;
      talentsPtr.manaFeed = parseInt(player.talents.manaFeed) || 0;
      talentsPtr.masterDemonologist = parseInt(player.talents.masterDemonologist) || 0;
      talentsPtr.soulLink = parseInt(player.talents.soulLink) || 0;
      talentsPtr.demonicKnowledge = parseInt(player.talents.demonicKnowledge) || 0;
      talentsPtr.demonicTactics = parseInt(player.talents.demonicTactics) || 0;
      talentsPtr.summonFelguard = parseInt(player.talents.summonFelguard) || 0;
      talentsPtr.improvedShadowBolt = parseInt(player.talents.improvedShadowBolt) || 0;
      talentsPtr.cataclysm = parseInt(player.talents.cataclysm) || 0;
      talentsPtr.bane = parseInt(player.talents.bane) || 0;
      talentsPtr.improvedFirebolt = parseInt(player.talents.improvedFirebolt) || 0;
      talentsPtr.improvedLashOfPain = parseInt(player.talents.improvedLashOfPain) || 0;
      talentsPtr.devastation = parseInt(player.talents.devastation) || 0;
      talentsPtr.shadowburn = parseInt(player.talents.shadowburn) || 0;
      talentsPtr.improvedSearingPain = parseInt(player.talents.improvedSearingPain) || 0;
      talentsPtr.improvedImmolate = parseInt(player.talents.improvedImmolate) || 0;
      talentsPtr.ruin = parseInt(player.talents.ruin) || 0;
      talentsPtr.emberstorm = parseInt(player.talents.emberstorm) || 0;
      talentsPtr.backlash = parseInt(player.talents.backlash) || 0;
      talentsPtr.conflagrate = parseInt(player.talents.conflagrate) || 0;
      talentsPtr.shadowAndFlame = parseInt(player.talents.shadowAndFlame) || 0;
      talentsPtr.shadowfury = parseInt(player.talents.shadowfury) || 0;

      const setsPtr = module.allocSets();
      setsPtr.plagueheart = parseInt(player.sets['529']) || 0;
      setsPtr.spellfire = parseInt(player.sets['552']) || 0;
      setsPtr.frozenShadoweave = parseInt(player.sets['553']) || 0;
      setsPtr.spellstrike = parseInt(player.sets['559']) || 0;
      setsPtr.oblivion = parseInt(player.sets['644']) || 0;
      setsPtr.manaEtched = parseInt(player.sets['658']) || 0;
      setsPtr.twinStars = parseInt(player.sets['667']) || 0;
      setsPtr.t4 = parseInt(player.sets['645']) || 0;
      setsPtr.t5 = parseInt(player.sets['646']) || 0;
      setsPtr.t6 = parseInt(player.sets['670']) || 0;

      const statsPtr = module.allocStats();
      statsPtr.health = parseFloat(player.stats.health);
      statsPtr.mana = parseFloat(player.stats.mana);
      statsPtr.stamina = parseFloat(player.stats.stamina);
      statsPtr.intellect = parseFloat(player.stats.intellect);
      statsPtr.spirit = parseFloat(player.stats.spirit);
      statsPtr.spellPower = parseFloat(player.stats.spellPower);
      statsPtr.shadowPower = parseFloat(player.stats.shadowPower);
      statsPtr.firePower = parseFloat(player.stats.firePower);
      statsPtr.hasteRating = parseFloat(player.stats.hasteRating);
      statsPtr.hastePercent = 1;
      statsPtr.hitRating = parseFloat(player.stats.hitRating);
      statsPtr.critRating = parseFloat(player.stats.critRating);
      statsPtr.critChance = 0;
      statsPtr.mp5 = parseFloat(player.stats.mp5);
      statsPtr.manaCostModifier = 1;
      statsPtr.spellPenetration = parseFloat(player.stats.spellPenetration);
      statsPtr.fireModifier = parseFloat(player.stats.fireModifier);
      statsPtr.frostModifier = parseFloat(player.stats.frostModifier);
      statsPtr.shadowModifier = parseFloat(player.stats.shadowModifier);
      statsPtr.staminaModifier = parseFloat(player.stats.staminaModifier);
      statsPtr.intellectModifier = parseFloat(player.stats.intellectModifier);
      statsPtr.spiritModifier = parseFloat(player.stats.spiritModifier);
      statsPtr.arcaneModifier = parseFloat(player.stats.arcaneModifier);
      statsPtr.natureModifier = parseFloat(player.stats.natureModifier);
      statsPtr.natureResist = parseFloat(player.stats.natureResist);
      statsPtr.arcaneResist = parseFloat(player.stats.arcaneResist);
      statsPtr.fireResist = parseFloat(player.stats.fireResist);
      statsPtr.frostResist = parseFloat(player.stats.frostResist);
      statsPtr.shadowResist = parseFloat(player.stats.shadowResist);

      const playerSettingsPtr = module.allocPlayerSettings();
      playerSettingsPtr.auras = aurasPtr;
      playerSettingsPtr.talents = talentsPtr;
      playerSettingsPtr.sets = setsPtr;
      playerSettingsPtr.stats = statsPtr;
      playerSettingsPtr.items = itemsPtr;
      playerSettingsPtr.itemId = parseInt(event.data.itemId);
      playerSettingsPtr.metaGemId = parseInt(event.data.playerSettings.metaGemId);
      playerSettingsPtr.equippedItemSimulation = event.data.equippedItemSimulation === true;
      playerSettingsPtr.recordingCombatLogBreakdown = player.simSettings["automatically-open-sim-details"] === "yes";
      playerSettingsPtr.simmingStamina = event.data.customStat === "stamina";
      playerSettingsPtr.simmingIntellect = event.data.customStat === "intellect";
      playerSettingsPtr.simmingSpirit = event.data.customStat === "spirit";
      playerSettingsPtr.simmingSpellPower = event.data.customStat === "spellPower";
      playerSettingsPtr.simmingShadowPower = event.data.customStat === "shadowPower";
      playerSettingsPtr.simmingFirePower = event.data.customStat === "firePower";
      playerSettingsPtr.simmingHitRating = event.data.customStat === "hitRating";
      playerSettingsPtr.simmingCritRating = event.data.customStat === "critRating";
      playerSettingsPtr.simmingHasteRating = event.data.customStat === "hasteRating";
      playerSettingsPtr.simmingMp5 = event.data.customStat === "mp5";
      playerSettingsPtr.isAldor = player.simSettings.shattrathFaction === "Aldor";
      playerSettingsPtr.enemyLevel = parseInt(player.simSettings['target-level']);
      playerSettingsPtr.enemyShadowResist = parseInt(player.simSettings['target-shadow-resistance']);
      playerSettingsPtr.enemyFireResist = parseInt(player.simSettings['target-fire-resistance']);
      playerSettingsPtr.mageAtieshAmount = parseInt(player.simSettings.mageAtieshAmount);
      playerSettingsPtr.totemOfWrathAmount = parseInt(player.simSettings.totemOfWrathAmount);
      playerSettingsPtr.sacrificingPet = player.simSettings.sacrificePet === "yes";
      playerSettingsPtr.petIsImp = player.simSettings.petChoice === "0";
      playerSettingsPtr.petIsSuccubus = player.simSettings.petChoice === "2";
      playerSettingsPtr.petIsFelguard = player.simSettings.petChoice === "4";
      playerSettingsPtr.ferociousInspirationAmount = parseInt(player.simSettings.ferociousInspirationAmount);
      playerSettingsPtr.improvedCurseOfTheElements = parseInt(player.simSettings.improvedCurseOfTheElements);
      playerSettingsPtr.usingCustomIsbUptime = player.simSettings.customIsbUptime === "yes";
      playerSettingsPtr.customIsbUptimeValue = parseFloat(player.simSettings.customIsbUptimeValue);
      playerSettingsPtr.improvedDivineSpirit = parseInt(player.simSettings.improvedDivineSpirit);
      playerSettingsPtr.improvedImp = parseInt(player.simSettings.improvedImpSetting);
      playerSettingsPtr.shadowPriestDps = parseInt(player.simSettings.shadowPriestDps);
      playerSettingsPtr.warlockAtieshAmount = parseInt(player.simSettings.warlockAtieshAmount);
      playerSettingsPtr.improvedExposeArmor = parseInt(player.simSettings.improvedExposeArmor);
      playerSettingsPtr.isSingleTarget = !player.simSettings.fightType || player.simSettings.fightType === "singleTarget";
      playerSettingsPtr.enemyAmount = parseInt(player.simSettings.enemyAmount);
      playerSettingsPtr.isOrc = player.simSettings.race === "orc";
      playerSettingsPtr.powerInfusionAmount = parseInt(player.simSettings.powerInfusionAmount);
      playerSettingsPtr.bloodlustAmount = parseInt(player.simSettings.bloodlustAmount);
      playerSettingsPtr.innervateAmount = parseInt(player.simSettings.innervateAmount);
      playerSettingsPtr.enemyArmor = parseInt(player.simSettings.enemyArmor);
      playerSettingsPtr.exposeWeaknessUptime = parseFloat(player.simSettings.exposeWeaknessUptime);
      playerSettingsPtr.improvedFaerieFire = player.simSettings.improvedFaerieFire === "yes";
      playerSettingsPtr.infinitePlayerMana = player.simSettings.infinitePlayerMana === "yes";
      playerSettingsPtr.infinitePetMana = player.simSettings.infinitePetMana === "yes";
      playerSettingsPtr.usingLashOfPainOnCooldown = player.simSettings.lashOfPainUsage === "onCooldown";
      playerSettingsPtr.petIsAggressive = player.simSettings.petMode === "1";
      playerSettingsPtr.prepopBlackBook = player.simSettings.prepopBlackBook === "yes";
      playerSettingsPtr.randomizeValues = player.simSettings.randomizeValues === "yes";
      playerSettingsPtr.simChoosingRotation = player.simSettings.rotationOption === "simChooses";
      playerSettingsPtr.exaltedWithShattrathFaction = player.simSettings.shattrathFactionReputation === "yes";
      playerSettingsPtr.survivalHunterAgility = parseInt(player.simSettings.survivalHunterAgility);
      playerSettingsPtr.hasImmolate = player.rotation.dot && player.rotation.dot.immolate;
      playerSettingsPtr.hasCorruption = player.rotation.dot && player.rotation.dot.corruption;
      playerSettingsPtr.hasSiphonLife = player.rotation.dot && player.rotation.dot.siphonLife;
      playerSettingsPtr.hasUnstableAffliction = player.rotation.dot && player.rotation.dot.unstableAffliction;
      playerSettingsPtr.hasSearingPain = player.rotation.filler && player.rotation.filler.searingPain;
      playerSettingsPtr.hasShadowBolt = player.rotation.filler && player.rotation.filler.shadowBolt;
      playerSettingsPtr.hasIncinerate = player.rotation.filler && player.rotation.filler.incinerate;
      playerSettingsPtr.hasCurseOfRecklessness = player.rotation.curse && player.rotation.curse.curseOfRecklessness;
      playerSettingsPtr.hasCurseOfTheElements = player.rotation.curse && player.rotation.curse.curseOfTheElements;
      playerSettingsPtr.hasCurseOfAgony = player.rotation.curse && player.rotation.curse.curseOfAgony;
      playerSettingsPtr.hasCurseOfDoom = player.rotation.curse && player.rotation.curse.curseOfDoom;
      playerSettingsPtr.hasDeathCoil = player.rotation.finisher && player.rotation.finisher.deathCoil;
      playerSettingsPtr.hasShadowburn = player.rotation.finisher && player.rotation.finisher.shadowburn;
      playerSettingsPtr.hasConflagrate = player.rotation.finisher && player.rotation.finisher.conflagrate;
      playerSettingsPtr.hasShadowfury = player.rotation.other && player.rotation.other.shadowfury;
      playerSettingsPtr.hasAmplifyCurse = player.rotation.other && player.rotation.other.amplifyCurse;
      playerSettingsPtr.hasDarkPact = player.rotation.other && player.rotation.other.darkPact;
      playerSettingsPtr.hasElementalShamanT4Bonus = player.simSettings.improvedWrathOfAirTotem === "yes";

      const simSettingsPtr = module.allocSimSettings();
      simSettingsPtr.iterations = parseInt(simulation.iterations);
      simSettingsPtr.minTime = parseInt(simulation.minTime);
      simSettingsPtr.maxTime = parseInt(simulation.maxTime);
      simSettingsPtr.simulationType = parseInt(event.data.simulationType);

      const playerPtr = module.allocPlayer(playerSettingsPtr);
      const simPtr = module.allocSim(playerPtr, simSettingsPtr);
      simPtr.start();
    } catch (exceptionPtr) {
      console.error(module.getExceptionMessage(exceptionPtr));
    }
  })
  .catch(e => console.error(e));
};