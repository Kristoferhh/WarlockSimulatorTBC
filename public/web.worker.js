importScripts("./WarlockSim.js");

onmessage = (event) => {
  fetch('./WarlockSim.wasm')
  .then(response => response.arrayBuffer())
  .then(binary => WarlockSim({ wasmBinary: binary }))
  .then(w => w.ready)
  .then(module => {
    const player = event.data.playerSettings;
    const simulation = event.data.simulationSettings;

    const itemsPtr = module.allocItems();
    itemsPtr.head = player.items.head || 0;
    itemsPtr.neck = player.items.neck || 0;
    itemsPtr.shoulders = player.items.shoulders || 0;
    itemsPtr.back = player.items.back || 0;
    itemsPtr.chest = player.items.chest || 0;
    itemsPtr.bracer = player.items.bracer || 0;
    itemsPtr.gloves = player.items.gloves || 0;
    itemsPtr.belt = player.items.belt || 0;
    itemsPtr.legs = player.items.legs || 0;
    itemsPtr.boots = player.items.boots || 0;
    itemsPtr.ring1 = player.items.ring1 || 0;
    itemsPtr.ring2 = player.items.ring2 || 0;
    itemsPtr.trinket1 = player.items.trinket1 || 0;
    itemsPtr.trinket2 = player.items.trinket2 || 0;
    itemsPtr.mainhand = player.items.mainhand || 0;
    itemsPtr.offhand = player.items.offhand || 0;
    itemsPtr.twohand = player.items.twohand || 0;
    itemsPtr.wand = player.items.wand || 0;

    const aurasPtr = module.allocAuras();
    aurasPtr.felArmor = player.auras.felArmor;
    aurasPtr.blessingOfKings = player.auras.blessingOfKings;
    aurasPtr.blessingOfWisdom = player.auras.blessingOfWisdom;
    aurasPtr.judgementOfWisdom = player.auras.judgementOfWisdom;
    aurasPtr.manaSpringTotem = player.auras.manaSpringTotem;
    aurasPtr.wrathOfAirTotem = player.auras.wrathOfAirTotem;
    aurasPtr.totemOfWrath = player.auras.totemOfWrath;
    aurasPtr.markOfTheWild = player.auras.markOfTheWild;
    aurasPtr.arcaneIntellect = player.auras.arcaneIntellect;
    aurasPtr.prayerOfFortitude = player.auras.prayerOfFortitude;
    aurasPtr.prayerOfSpirit = player.auras.prayerOfSpirit;
    aurasPtr.bloodPact = player.auras.bloodPact;
    aurasPtr.inspiringPresence = player.auras.inspiringPresence;
    aurasPtr.moonkinAura = player.auras.moonkinAura;
    aurasPtr.powerInfusion = player.auras.powerInfusion;
    aurasPtr.powerOfTheGuardianWarlock = player.auras.powerOfTheGuardianWarlock;
    aurasPtr.powerOfTheGuardianMage = player.auras.powerOfTheGuardianMage;
    aurasPtr.eyeOfTheNight = player.auras.eyeOfTheNight;
    aurasPtr.chainOfTheTwilightOwl = player.auras.chainOfTheTwilightOwl;
    aurasPtr.jadePendantOfBlasting = player.auras.jadePendantOfBlasting;
    aurasPtr.idolOfTheRavenGoddess = player.auras.idolOfTheRavenGoddess;
    aurasPtr.drumsOfBattle = player.auras.drumsOfBattle;
    aurasPtr.drumsOfWar = player.auras.drumsOfWar;
    aurasPtr.drumsOfRestoration = player.auras.drumsOfRestoration;
    aurasPtr.bloodlust = player.auras.bloodlust;
    aurasPtr.ferociousInspiration = player.auras.ferociousInspiration;
    aurasPtr.innervate = player.auras.innervate;
    aurasPtr.manaTideTotem = player.auras.manaTideTotem;
    aurasPtr.chippedPowerCore = player.auras.chippedPowerCore;
    aurasPtr.crackedPowerCore = player.auras.crackedPowerCore;
    aurasPtr.curseOfTheElements = player.auras.curseOfTheElements;
    aurasPtr.shadowWeaving = player.auras.shadowWeaving;
    aurasPtr.improvedScorch = player.auras.improvedScorch;
    aurasPtr.misery = player.auras.misery;
    aurasPtr.judgementOfTheCrusader = player.auras.judgementOfTheCrusader;
    aurasPtr.vampiricTouch = player.auras.vampiricTouch;
    aurasPtr.faerieFire = player.auras.faerieFire;
    aurasPtr.sunderArmor = player.auras.sunderArmor;
    aurasPtr.exposeArmor = player.auras.exposeArmor;
    aurasPtr.curseOfRecklessness = player.auras.curseOfRecklessness;
    aurasPtr.bloodFrenzy = player.auras.bloodFrenzy;
    aurasPtr.exposeWeakness = player.auras.exposeWeakness;
    aurasPtr.annihilator = player.auras.annihilator;
    aurasPtr.improvedHuntersMark = player.auras.improvedHuntersMark;
    aurasPtr.flaskOfPureDeath = player.auras.flaskOfPureDeath;
    aurasPtr.elixirOfMajorShadowPower = player.auras.elixirOfMajorShadowPower;
    aurasPtr.elixirOfMajorFirepower = player.auras.elixirOfMajorFirepower;
    aurasPtr.greaterArcaneElixir = player.auras.greaterArcaneElixir;
    aurasPtr.adeptsElixir = player.auras.adeptsElixir;
    aurasPtr.elixirOfDraenicWisdom = player.auras.elixirOfDraenicWisdom;
    aurasPtr.elixirOfMajorMageblood = player.auras.elixirOfMajorMageblood;
    aurasPtr.superManaPotion = player.auras.superManaPotion;
    aurasPtr.destructionPotion = player.auras.destructionPotion;
    aurasPtr.brilliantWizardOil = player.auras.brilliantWizardOil;
    aurasPtr.superiorWizardOil = player.auras.superiorWizardOil;
    aurasPtr.blessedWizardOil = player.auras.blessedWizardOil;
    aurasPtr.demonicRune = player.auras.demonicRune;
    aurasPtr.flameCap = player.auras.flameCap;
    aurasPtr.rumseyRumBlackLabel = player.auras.rumseyRumBlackLabel;
    aurasPtr.kreegsStoutBeatdown = player.auras.kreegsStoutBeatdown;
    aurasPtr.blackenedBasilisk = player.auras.blackenedBasilisk;
    aurasPtr.skullfishSoup = player.auras.skullfishSoup;
    aurasPtr.veryBerryCream = player.auras.veryBerryCream;
    aurasPtr.midsummerSausage = player.auras.midsummerSausage;
    aurasPtr.bloodthistle = player.auras.bloodthistle;
    aurasPtr.blessingOfKingsPet = player.auras.blessingOfKingsPet;
    aurasPtr.blessingOfWisdomPet = player.auras.blessingOfWisdomPet;
    aurasPtr.blessingOfMight = player.auras.blessingOfMight;
    aurasPtr.arcaneIntellectPet = player.auras.arcaneIntellectPet;
    aurasPtr.markOfTheWildPet = player.auras.markOfTheWildPet;
    aurasPtr.prayerOfFortitudePet = player.auras.prayerOfFortitudePet;
    aurasPtr.prayerOfSpiritPet = player.auras.prayerOfSpiritPet;
    aurasPtr.kiblersBits = player.auras.kiblersBits;
    aurasPtr.heroicPresence = player.auras.heroicPresence;
    aurasPtr.strengthOfEarthTotem = player.auras.strengthOfEarthTotem;
    aurasPtr.graceOfAirTotem = player.auras.graceOfAirTotem;
    aurasPtr.battleShout = player.auras.battleShout;
    aurasPtr.trueshotAura = player.auras.trueshotAura;
    aurasPtr.leaderOfThePack = player.auras.leaderOfThePack;
    aurasPtr.unleashedRage = player.auras.unleashedRage;
    aurasPtr.scrollOfStaminaV = player.auras.scrollOfStaminaV;
    aurasPtr.scrollOfIntellectV = player.auras.scrollOfIntellectV;
    aurasPtr.scrollOfStrengthV = player.auras.scrollOfStrengthV;
    aurasPtr.scrollOfAgilityV = player.auras.scrollOfAgilityV;
    aurasPtr.scrollOfSpiritV = player.auras.scrollOfSpiritV;

    const talentsPtr = module.allocTalents();
    talentsPtr.suppression = parseInt(player.talents.suppression) || 0;
    talentsPtr.improvedCorruption = parseInt(player.talents.improvedCorruption) || 0;
    talentsPtr.improvedLifeTap = parseInt(player.talents.improvedLifeTap) || 0;
    talentsPtr.improvedCurseOfAgony = parseInt(player.talents.improvedCurseOfAgony) || 0;
    talentsPtr.amplifyCurse = parseInt(player.talents.amplifyCurse) || 0;
    talentsPtr.nightfall = parseInt(player.talents.nightfall) || 0;
    talentsPtr.empoweredCorruption = parseInt(player.talents.empoweredCorruption) || 0;
    talentsPtr.siphonLife = parseInt(player.talents.siphonLife) || 0;
    talentsPtr.shadowMastery = parseInt(player.talents.shadowMastery) || 0;
    talentsPtr.contagion = parseInt(player.talents.contagion) || 0;
    talentsPtr.darkPact = parseInt(player.talents.darkPact) || 0;
    talentsPtr.unstableAffliction = parseInt(player.talents.unstableAffliction) || 0;
    talentsPtr.improvedImp = parseInt(player.talents.improvedImp) || 0;
    talentsPtr.demonicEmbrace = parseInt(player.talents.demonicEmbrace) || 0;
    talentsPtr.felIntellect = parseInt(player.talents.felIntellect) || 0;
    talentsPtr.felStamina = parseInt(player.talents.felStamina) || 0;
    talentsPtr.improvedSuccubus = parseInt(player.talents.improvedSuccubus) || 0;
    talentsPtr.demonicAegis = parseInt(player.talents.demonicAegis) || 0;
    talentsPtr.unholyPower = parseInt(player.talents.unholyPower) || 0;
    talentsPtr.demonicSacrifice = parseInt(player.talents.demonicSacrifice) || 0;
    talentsPtr.manaFeed = parseInt(player.talents.manaFeed) || 0;
    talentsPtr.masterDemonologist = parseInt(player.talents.masterDemonologist) || 0;
    talentsPtr.soulLink = parseInt(player.talents.soulLink) || 0;
    talentsPtr.demonicKnowledge = parseInt(player.talents.demonicKnowledge) || 0;
    talentsPtr.demonicTactics = parseInt(player.talents.demonicTactics) || 0;
    talentsPtr.summonFelguard = parseInt(player.talents.summonFelguard) || 0;
    talentsPtr.improvedShadowBolt = parseInt(player.talents.improvedShadowBolt) || 0;
    talentsPtr.cataclysm = parseInt(player.talents.cataclysm) || 0;
    talentsPtr.bane = parseInt(player.talents.bane) || 0;
    talentsPtr.improvedFirebolt = parseInt(player.talents.improvedFirebolt) || 0;
    talentsPtr.improvedLashOfPain = parseInt(player.talents.improvedLashOfPain) || 0;
    talentsPtr.devastation = parseInt(player.talents.devastation) || 0;
    talentsPtr.shadowburn = parseInt(player.talents.shadowburn) || 0;
    talentsPtr.improvedSearingPain = parseInt(player.talents.improvedSearingPain) || 0;
    talentsPtr.improvedImmolate = parseInt(player.talents.improvedImmolate) || 0;
    talentsPtr.ruin = parseInt(player.talents.ruin) || 0;
    talentsPtr.emberstorm = parseInt(player.talents.emberstorm) || 0;
    talentsPtr.backlash = parseInt(player.talents.backlash) || 0;
    talentsPtr.conflagrate = parseInt(player.talents.conflagrate) || 0;
    talentsPtr.shadowAndFlame = parseInt(player.talents.shadowAndFlame) || 0;
    talentsPtr.shadowfury = parseInt(player.talents.shadowfury) || 0;

    const setsPtr = module.allocSets();
    setsPtr.plagueheart = player.sets['529'] || 0;
    setsPtr.spellfire = player.sets['552'] || 0;
    setsPtr.frozenShadoweave = player.sets['553'] || 0;
    setsPtr.spellstrike = player.sets['559'] || 0;
    setsPtr.oblivion = player.sets['644'] || 0;
    setsPtr.manaEtched = player.sets['658'] || 0;
    setsPtr.twinStars = player.sets['667'] || 0;
    setsPtr.t4 = player.sets['645'] || 0;
    setsPtr.t5 = player.sets['646'] || 0;
    setsPtr.t6 = player.sets['670'] || 0;

    const statsPtr = module.allocStats();
    statsPtr.health = parseInt(player.stats.health);
    statsPtr.mana = parseInt(player.stats.mana);
    statsPtr.stamina = parseInt(player.stats.stamina);
    statsPtr.intellect = parseInt(player.stats.intellect);
    statsPtr.spirit = parseInt(player.stats.spirit);
    statsPtr.spellPower = parseInt(player.stats.spellPower);
    statsPtr.shadowPower = parseInt(player.stats.shadowPower);
    statsPtr.firePower = parseInt(player.stats.firePower);
    statsPtr.hasteRating = parseInt(player.stats.hasteRating);
    statsPtr.hastePercent = 1;
    statsPtr.hitRating = parseInt(player.stats.hitRating);
    statsPtr.critRating = parseInt(player.stats.critRating);
    statsPtr.critChance = 0;
    statsPtr.mp5 = parseInt(player.stats.mp5);
    statsPtr.manaCostModifier = 1;
    statsPtr.spellPenetration = parseInt(player.stats.spellPenetration);
    statsPtr.fireModifier = parseInt(player.stats.fireModifier);
    statsPtr.frostModifier = parseInt(player.stats.frostModifier);
    statsPtr.shadowModifier = parseInt(player.stats.shadowModifier);
    statsPtr.staminaModifier = parseInt(player.stats.staminaModifier);
    statsPtr.intellectModifier = parseInt(player.stats.intellectModifier);
    statsPtr.spiritModifier = parseInt(player.stats.spiritModifier);
    statsPtr.arcaneModifier = parseInt(player.stats.arcaneModifier);
    statsPtr.natureModifier = parseInt(player.stats.natureModifier);
    statsPtr.natureResist = parseInt(player.stats.natureResist);
    statsPtr.arcaneResist = parseInt(player.stats.arcaneResist);
    statsPtr.fireResist = parseInt(player.stats.fireResist);
    statsPtr.frostResist = parseInt(player.stats.frostResist);
    statsPtr.shadowResist = parseInt(player.stats.shadowResist);

    const playerSettingsPtr = module.allocPlayerSettings();
    playerSettingsPtr.auras = aurasPtr;
    playerSettingsPtr.talents = talentsPtr;
    playerSettingsPtr.sets = setsPtr;
    playerSettingsPtr.stats = statsPtr;
    playerSettingsPtr.items = itemsPtr;
    playerSettingsPtr.itemId = parseInt(event.data.itemId);
    playerSettingsPtr.metaGemId = parseInt(event.data.playerSettings.metaGemId);
    playerSettingsPtr.equippedItemSimulation = event.data.equippedItemSimulation === true;
    playerSettingsPtr.recordingCombatLogBreakdown = player.simSettings["automatically-open-sim-details"] === "yes";
    playerSettingsPtr.simmingStamina = event.data.customStat === "stamina";
    playerSettingsPtr.simmingIntellect = event.data.customStat === "intellect";
    playerSettingsPtr.simmingSpirit = event.data.customStat === "spirit";
    playerSettingsPtr.simmingSpellPower = event.data.customStat === "spellPower";
    playerSettingsPtr.simmingShadowPower = event.data.customStat === "shadowPower";
    playerSettingsPtr.simmingFirePower = event.data.customStat === "firePower";
    playerSettingsPtr.simmingHitRating = event.data.customStat === "hitRating";
    playerSettingsPtr.simmingCritRating = event.data.customStat === "critRating";
    playerSettingsPtr.simmingHasteRating = event.data.customStat === "hasteRating";
    playerSettingsPtr.simmingMp5 = event.data.customStat === "mp5";
    playerSettingsPtr.isAldor = player.simSettings.shattrathFaction === "Aldor";
    playerSettingsPtr.enemyLevel = parseInt(player.simSettings['target-level']);
    playerSettingsPtr.enemyShadowResist = parseInt(player.simSettings['target-shadow-resistance']);
    playerSettingsPtr.enemyFireResist = parseInt(player.simSettings['target-fire-resistance']);
    playerSettingsPtr.mageAtieshAmount = parseInt(player.simSettings.mageAtieshAmount);
    playerSettingsPtr.totemOfWrathAmount = parseInt(player.simSettings.totemOfWrathAmount);
    playerSettingsPtr.sacrificingPet = player.simSettings.sacrificePet === "yes";
    playerSettingsPtr.petIsImp = player.simSettings.petChoice === "0";
    playerSettingsPtr.petIsSuccubus = player.simSettings.petChoice === "2";
    playerSettingsPtr.petIsFelguard = player.simSettings.petChoice === "4";
    playerSettingsPtr.ferociousInspirationAmount = parseInt(player.simSettings.ferociousInspirationAmount);
    playerSettingsPtr.improvedCurseOfTheElements = parseInt(player.simSettings.improvedCurseOfTheElements);
    playerSettingsPtr.usingCustomIsbUptime = player.simSettings.customIsbUptime === "yes";
    playerSettingsPtr.customIsbUptimeValue = parseInt(player.simSettings.customIsbUptimeValue);
    playerSettingsPtr.improvedDivineSpirit = parseInt(player.simSettings.improvedDivineSpirit);
    playerSettingsPtr.improvedImp = parseInt(player.simSettings.improvedImpSetting);
    playerSettingsPtr.shadowPriestDps = parseInt(player.simSettings.shadowPriestDps);
    playerSettingsPtr.warlockAtieshAmount = parseInt(player.simSettings.warlockAtieshAmount);
    playerSettingsPtr.improvedExposeArmor = parseInt(player.simSettings.improvedExposeArmor);
    playerSettingsPtr.isSingleTarget = !player.simSettings.fightType || player.simSettings.fightType === "singleTarget";
    playerSettingsPtr.enemyAmount = parseInt(player.simSettings.enemyAmount);
    playerSettingsPtr.isOrc = player.simSettings.race === "orc";
    playerSettingsPtr.powerInfusionAmount = parseInt(player.simSettings.powerInfusionAmount);
    playerSettingsPtr.bloodlustAmount = parseInt(player.simSettings.bloodlustAmount);
    playerSettingsPtr.innervateAmount = parseInt(player.simSettings.innervateAmount);
    playerSettingsPtr.enemyArmor = parseInt(player.simSettings.enemyArmor);
    playerSettingsPtr.exposeWeaknessUptime = parseInt(player.simSettings.exposeWeaknessUptime);
    playerSettingsPtr.improvedFaerieFire = player.simSettings.improvedFaerieFire === "yes";
    playerSettingsPtr.infinitePlayerMana = player.simSettings.infinitePlayerMana === "yes";
    playerSettingsPtr.infinitePetMana = player.simSettings.infinitePetMana === "yes";
    playerSettingsPtr.usingLashOfPainOnCooldown = player.simSettings.lashOfPainUsage === "onCooldown";
    playerSettingsPtr.petIsAggressive = player.simSettings.petMode === "1";
    playerSettingsPtr.prepopBlackBook = player.simSettings.prepopBlackBook === "yes";
    playerSettingsPtr.randomizeValues = player.simSettings.randomizeValues === "yes";
    playerSettingsPtr.simChoosingRotation = player.simSettings.rotationOption === "simChooses";
    playerSettingsPtr.exaltedWithShattrathFaction = player.simSettings.shattrathFactionReputation === "yes";
    playerSettingsPtr.survivalHunterAgility = parseInt(player.simSettings.survivalHunterAgility);
    playerSettingsPtr.hasImmolate = player.rotation.dot && player.rotation.dot.immolate;
    playerSettingsPtr.hasCorruption = player.rotation.dot && player.rotation.dot.corruption;
    playerSettingsPtr.hasSiphonLife = player.rotation.dot && player.rotation.dot.siphonLife;
    playerSettingsPtr.hasUnstableAffliction = player.rotation.dot && player.rotation.dot.unstableAffliction;
    playerSettingsPtr.hasSearingPain = player.rotation.filler && player.rotation.filler.searingPain;
    playerSettingsPtr.hasShadowBolt = player.rotation.filler && player.rotation.filler.shadowBolt;
    playerSettingsPtr.hasIncinerate = player.rotation.filler && player.rotation.filler.incinerate;
    playerSettingsPtr.hasCurseOfRecklessness = player.rotation.curse && player.rotation.curse.curseOfRecklessness;
    playerSettingsPtr.hasCurseOfTheElements = player.rotation.curse && player.rotation.curse.curseOfTheElements;
    playerSettingsPtr.hasCurseOfAgony = player.rotation.curse && player.rotation.curse.curseOfAgony;
    playerSettingsPtr.hasCurseOfDoom = player.rotation.curse && player.rotation.curse.curseOfDoom;
    playerSettingsPtr.hasDeathCoil = player.rotation.finisher && player.rotation.finisher.deathCoil;
    playerSettingsPtr.hasShadowburn = player.rotation.finisher && player.rotation.finisher.shadowburn;
    playerSettingsPtr.hasConflagrate = player.rotation.finisher && player.rotation.finisher.conflagrate;
    playerSettingsPtr.hasShadowfury = player.rotation.other && player.rotation.other.shadowfury;
    playerSettingsPtr.hasAmplifyCurse = player.rotation.other && player.rotation.other.amplifyCurse;
    playerSettingsPtr.hasDarkPact = player.rotation.other && player.rotation.other.darkPact;
    playerSettingsPtr.hasElementalShamanT4Bonus = player.simSettings.improvedWrathOfAirTotem === "yes";
    debugger;

    const simSettingsPtr = module.allocSimSettings();
    simSettingsPtr.iterations = parseInt(simulation.iterations);
    simSettingsPtr.minTime = parseInt(simulation.minTime);
    simSettingsPtr.maxTime = parseInt(simulation.maxTime);
    simSettingsPtr.simulationType = parseInt(event.data.simulationType);

    const playerPtr = module.allocPlayer(playerSettingsPtr);
    const simPtr = module.allocSim(playerPtr, simSettingsPtr);
    simPtr.start();
  })
  .catch(e => console.error(e));
};